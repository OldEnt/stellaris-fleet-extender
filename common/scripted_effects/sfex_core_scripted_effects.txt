# Set up SFEX Core Global Event Country.
sfex_core_create_global_country_if_needed = {
	if = {
		limit = {
			NOT = {
				exists = event_target:sfex_core_global_country
			}
		}
		create_species = {
			class = MOL
			portrait = mol17
			effect = {
				save_global_event_target_as = sfex_core_global_species
			}
		}
		create_country = {
			type = sfex_core_global_country
			name = "SFEX Core Global Event Country"
			species = event_target:sfex_core_global_species
			effect = {
				save_global_event_target_as = sfex_core_global_country
			}
		}
	}
}

# FLAG = unique flag across all mods
# NAME = name displayed on the button
sfex_core_register_name = {
	sfex_core_create_global_country_if_needed = yes	# Set up SFEX Core Global Event Country.
	event_target:sfex_core_global_country = {
		if = {
			limit = {
				NOT = {
					any_owned_leader = {
						has_leader_flag = $NAME$
					}
				}
			}
			create_leader = {
				class = general
				name = $NAME$
				species = event_target:sfex_core_global_species
				immortal = yes
			}
			last_created_leader = {
				set_leader_flag = $NAME$
				save_global_event_target_as = sfex_core_event_target_name_$NAME$
			}
		}
	}
}

# FLAG = unique flag across all mods
sfex_core_deregister_name = {
	sfex_core_create_global_country_if_needed = yes	# Set up SFEX Core Global Event Country.
	event_target:sfex_global_country = {
		every_owned_leader = {
			limit = {
				has_leader_flag = $FLAG$
			}
			kill_leader = {
				type = general
			}
		}
		clear_global_event_target = sfex_core_event_target_name_$FLAG$
	}
}

# Main sfex_set_fleet_order effect.
sfex_set_fleet_order = {
	[[ORDER]
	set_timed_fleet_flag = {
		flag = sfex_fleet_flag_$ORDER$_order
		days = 16
	}
	]
	[[MODNAME]
	set_timed_fleet_flag = {
		flag = sfex_fleet_flag_$MODNAME$_value
		days = 16
	}
	# check if optional MODNAME exist
	event_target:sfex_core_global_country = {
		if = {
			limit = {
				NOT = {
					any_owned_leader = {
						has_leader_flag = $MODNAME$
					}
				}
			}
			create_leader = {
				class = general
				name = random
				species = event_target:sfex_core_global_species
				immortal = yes
			}
			last_created_leader = {
				set_name = $MODNAME$
				set_leader_flag = $MODNAME$
				save_global_event_target_as = sfex_core_event_target_name_$MODNAME$
			}
		}
	}
	]
	if = {
		limit = {
			has_global_flag = sfex_verbose_logging_enabled
		}
		if = {
			limit = {
				NOT = {
					has_fleet_flag = sfex_fleet_flag_$MODNAME$_value
				}
			}
			log = "sfex_set_fleet_order: MODNAME not set. Continuing anyway."
		}
	}
	# grab TARGET scope
	# sfex_core_grab_target_1_scope_legacy_scripted_effect = yes
	[[TARGET]
	set_fleet_flag = sfex_$TARGET$
	]
	if = {
		limit = {
			has_fleet_flag = sfex_$TARGET$
		}
		if = {
			limit = {
				is_scope_set = $TARGET$
			}
			$TARGET$ = {
				save_event_target_as = sfex_core_event_target_1
			}
		}
		else_if = {
			limit = {
				is_scope_set = event_target:$TARGET$
			}
			event_target:$TARGET$ = {
				save_event_target_as = sfex_core_event_target_1
			}
		}
		else = {
			log = "sfex_set_fleet_order: Unsupported scope operator or scope does not exist. event_targets must be referenced by name only."
		}
	}
	# Print scopes for debug.
	if = {
		limit = {
			has_global_flag = sfex_verbose_logging_scopes_enabled
		}
		root = {
			log = "0. root = \\[this.GetName]"
		}
		this = {
			log = "1. this = \\[this.GetName]"
		}
		if = {
			limit = {
				exists = prev
			}
			prev = {
				log = "2. prev = \\[this.GetName]"
			}
		}
		if = {
			limit = {
				exists = prevprev
			}
			prevprev = {
				log = "3. prevprev = \\[this.GetName]"
			}
		}
		if = {
			limit = {
				exists = prevprevprev
			}
			prevprevprev = {
				log = "4. prevprevprev = \\[this.GetName]"
			}
		}
		if = {
			limit = {
				exists = prevprevprevprev
			}
			prevprevprevprev = {
				log = "5. prevprevprevprev = \\[this.GetName]"
			}
		}
		if = {
			limit = {
				exists = from
			}
			from = {
				log = "6. from = \\[this.GetName]"
			}
		}
		if = {
			limit = {
				exists = fromfrom
			}
			fromfrom = {
				log = "7. fromfrom = \\[this.GetName]"
			}
		}
		if = {
			limit = {
				exists = fromfromfrom
			}
			fromfromfrom = {
				log = "8. fromfromfrom = \\[this.GetName]"
			}
		}
		if = {
			limit = {
				exists = fromfromfromfrom
			}
			fromfromfromfrom = {
				log = "9. fromfromfromfrom = \\[this.GetName]"
			}
		}
	}
	# scope validator
	# none, megastructure, planet, country, ship, pop, fleet, galactic_object, leader, army, ambient_object, species, design,pop_faction, war, alliance, starbase,deposit,observer, sector.
	if = {
		limit = {
			exists = event_target:sfex_core_event_target_1
		}
		switch = {
			trigger = has_fleet_flag
			# jumpdrive_order
			sfex_fleet_flag_jumpdrive_order = {
				event_target:sfex_core_event_target_1 = {
					switch = {
						trigger = is_scope_type
						ambient_object = {
						}
						galactic_object = {
						}
						planet = {
						}
						fleet = {
						}
						megastructure = {
						}
						default = {
							prev = {
								set_timed_fleet_flag = {
									flag = slex_core_scope_1_invalid
									days = 1
								}
							}
							log = "ORDER jumpdrive: invalid scope type. Must be galactic_object (solar_system), ambient_object, planet, fleet or megastructure. "
						}
					}
				}
			}
			# build_order
			sfex_fleet_flag_build_order = {
				event_target:sfex_core_event_target_1 = {
					switch = {
						trigger = is_scope_type
						planet = {
						}
						default = {
							prev = {
								set_timed_fleet_flag = {
									flag = slex_core_scope_1_invalid
									days = 1
								}
							}
							log = "ORDER build: invalid scope type. Must be planet."
						}
					}
				}
			}
		}
	}
	if = {
		limit = {
			NOT = {
				has_fleet_flag = slex_core_scope_1_invalid
			}
		}
		switch = {
			trigger = has_fleet_flag
			# jumpdrive_order
			sfex_fleet_flag_jumpdrive_order = {
				if = {
					limit = {
						exists = event_target:sfex_core_event_target_1
					}
					[[JUMPDRIVE_CUSTOM_MAX_RANGE]
					set_variable = {
						which = sfex_fleet_order_var_jumpdrive_custom_max_range
						value = $JUMPDRIVE_CUSTOM_MAX_RANGE$
					}
					]
					if = {
						limit = {
							NOR = {
								is_variable_set = sfex_fleet_order_var_jumpdrive_custom_max_range
								owner = {
									is_variable_set = sfex_fleet_order_var_jumpdrive_custom_max_range
								}
								event_target:global_event_country = {
									is_variable_set = sfex_fleet_order_var_jumpdrive_custom_max_range
								}
							}
						}
						set_variable = {
							which = sfex_fleet_order_var_jumpdrive_custom_max_range_set
							value = 100							# Vanilla default
						}
					}
					else_if = {
						limit = {
							owner = {
								is_variable_set = sfex_fleet_order_var_jumpdrive_custom_max_range
							}
						}
						set_variable = {
							which = sfex_fleet_order_var_jumpdrive_custom_max_range_set
							value = sfex_fleet_order_var_jumpdrive_custom_max_range.owner							# Vanilla default
						}
					}
					else_if = {
						limit = {
							event_target:global_event_country = {
								is_variable_set = sfex_fleet_order_var_jumpdrive_custom_max_range
							}
						}
						set_variable = {
							which = sfex_fleet_order_var_jumpdrive_custom_max_range_set
							value = sfex_fleet_order_var_jumpdrive_custom_max_range.event_target:global_event_country							# Vanilla default
						}
					}
					else_if = {
						limit = {
							is_variable_set = sfex_fleet_order_var_jumpdrive_custom_max_range
						}
						set_variable = {
							which = sfex_fleet_order_var_jumpdrive_custom_max_range_set
							value = sfex_fleet_order_var_jumpdrive_custom_max_range							# Vanilla default
						}
					}
					[[JUMPDRIVE_IGNORE_CAN_JUMP_DRIVE]
					set_timed_fleet_flag = {
						flag = sfex_jumpdrive_order_fleet_flag_ignore_can_jump_drive_$JUMPDRIVE_IGNORE_CAN_JUMP_DRIVE$
						days = 16
					}
					]
					[[JUMPDRIVE_IGNORE_CAN_ENTER_SYSTEM_BY_JUMP]
					set_timed_fleet_flag = {
						flag = sfex_jumpdrive_order_fleet_flag_ignore_can_enter_system_by_jump_$JUMPDRIVE_IGNORE_CAN_ENTER_SYSTEM_BY_JUMP$
						days = 16
					}
					]
					if = {
						limit = {
							has_global_flag = sfex_verbose_logging_enabled
						}
						if = {
							limit = {
								NOT = {
									is_variable_set = sfex_fleet_order_var_jumpdrive_custom_max_range
								}
							}
							log = "sfex_set_fleet_order: JUMPDRIVE_CUSTOM_MAX_RANGE not set. Using default value."
						}
						if = {
							limit = {
								NOT = {
									has_fleet_flag = sfex_jumpdrive_order_fleet_flag_ignore_can_enter_system_by_jump_$JUMPDRIVE_IGNORE_CAN_ENTER_SYSTEM_BY_JUMP$
								}
							}
							log = "sfex_set_fleet_order: JUMPDRIVE_IGNORE_CAN_ENTER_SYSTEM_BY_JUMP not set. Using default value."
						}
						if = {
							limit = {
								NOT = {
									has_fleet_flag = sfex_jumpdrive_order_fleet_flag_ignore_can_jump_drive_$JUMPDRIVE_IGNORE_CAN_JUMP_DRIVE$
								}
							}
							log = "sfex_set_fleet_order: JUMPDRIVE_IGNORE_CAN_JUMP_DRIVE not set. Using default value."
						}
					}
					# Summary of else below. Do not uncomment.
					# if = {
					# 	limit = {
					# 		has_fleet_flag = sfex_jumpdrive_order_fleet_flag_ignore_can_jump_drive_yes
					# 		has_fleet_flag = sfex_jumpdrive_order_fleet_flag_ignore_can_enter_system_by_jump_yes
					# 	}
					# 	fleet_event = {
					# 		id = sfex_jumpdrive_order.2							# jumpdrive_windup
					# 	}
					# }
					if = {
						limit = {
							NOT = {
								has_fleet_flag = sfex_jumpdrive_order_fleet_flag_ignore_can_jump_drive_yes
							}
						}
						if = {
							limit = {
								sfex_jumpdrive_order_can_jump_drive_scripted_trigger = yes
							}
							if = {
								limit = {
									has_global_flag = sfex_verbose_logging_enabled
								}
								log = "sfex_can_jump_drive_scripted_trigger returned true."
							}
							if = {
								limit = {
									NOT = {
										has_fleet_flag = sfex_jumpdrive_order_fleet_flag_ignore_can_enter_system_by_jump_yes
									}
								}
								if = {
									limit = {
										event_target:sfex_core_event_target_1 = {
											sfex_jumpdrive_order_can_enter_system_by_jump_scripted_trigger = yes
										}
									}
									if = {
										limit = {
											has_global_flag = sfex_verbose_logging_enabled
										}
										log = "sfex_jumpdrive_order_can_enter_system_by_jump_scripted_trigger returned true."
									}
									fleet_event = {
										id = sfex_jumpdrive_order.2										# jumpdrive_windup
									}
								}
								else = {
									log = "sfex_jumpdrive_order_can_enter_system_by_jump_scripted_trigger returned false."
								}
							}
							else = {
								fleet_event = {
									id = sfex_jumpdrive_order.2									# jumpdrive_windup
								}
							}
						}
						else = {
							log = "sfex_jumpdrive_order_can_jump_drive_scripted_trigger returned false."
						}
					}
					else = {
						if = {
							limit = {
								NOT = {
									has_fleet_flag = sfex_jumpdrive_order_fleet_flag_ignore_can_enter_system_by_jump_yes
								}
							}
							if = {
								limit = {
									event_target:sfex_core_event_target_1 = {
										sfex_jumpdrive_order_can_enter_system_by_jump_scripted_trigger = yes
									}
								}
								if = {
									limit = {
										has_global_flag = sfex_verbose_logging_enabled
									}
									log = "sfex_jumpdrive_order_can_enter_system_by_jump_scripted_trigger returned true."
								}
								fleet_event = {
									id = sfex_jumpdrive_order.2									# jumpdrive_windup
								}
							}
							else = {
								log = "sfex_jumpdrive_order_can_enter_system_by_jump_scripted_trigger returned false."
							}
						}
						else = {
							fleet_event = {
								id = sfex_jumpdrive_order.2								# jumpdrive_windup
							}
						}
					}
				}
				else = {
					log = "ORDER jumpdrive: event_target:sfex_core_event_target_1 does not exist."
				}
			}
			# build_order
			sfex_fleet_flag_build_order = {
				if = {
					limit = {
						exists = event_target:sfex_core_event_target_1
					}
					sfex_core_create_global_country_if_needed = yes
					event_target:sfex_core_global_country = {
						random_owned_leader = {
							limit = {
								has_leader_flag = sfex_$BUILD_STRUCTURE$
							}
							save_event_target_as = sfex_event_target_build_order_structure
						}
						if = {
							limit = {
								NOT = {
									exists = event_target:sfex_event_target_build_order_structure
								}
							}
							create_leader = {
								class = general
								name = "$BUILD_STRUCTURE$"
								species = event_target:sfex_core_global_species
								immortal = yes
							}
							last_created_leader = {
								set_leader_flag = sfex_$BUILD_STRUCTURE$
								save_event_target_as = sfex_event_target_build_order_structure
							}
						}
					}
					fleet_event = {
						id = sfex_build_order.2
					}
				}
				else = {
					log = "ORDER build: event_target:sfex_core_event_target_1 does not exist."
				}
			}
			default = {
				event_target:sfex_event_target_mod_name_register = {
					log = "sfex_set_fleet_order: ORDER must be: jumpdrive build."
				}
			}
		}
	}
}

sfex_core_grab_target_1_scope_legacy_scripted_effect = {
	# grab TARGET scope
	[[TARGET]
	set_fleet_flag = sfex_$TARGET$
	]
	if = {
		limit = {
			has_fleet_flag = sfex_$TARGET$
		}
		if = {
			limit = {
				exists = event_target:$TARGET$
			}
			event_target:$TARGET$ = {
				save_event_target_as = sfex_core_event_target_1
			}
		}
		else = {
			switch = {
				trigger = has_fleet_flag
				# sfex_this = {}
				sfex_root = {
					if = {
						limit = {
							exists = root
						}
						root = {
							save_event_target_as = sfex_core_event_target_1
						}
					}
					else = {
						log = "sfex_set_fleet_order: root is valid scope operator but scope does not exist."
					}
				}
				sfex_prev = {
					if = {
						limit = {
							exists = prev
						}
						prev = {
							save_event_target_as = sfex_core_event_target_1
						}
					}
					else = {
						log = "sfex_set_fleet_order: prev is valid scope operator but scope does not exist."
					}
				}
				sfex_prevprev = {
					if = {
						limit = {
							exists = prevprev
						}
						prevprev = {
							save_event_target_as = sfex_core_event_target_1
						}
					}
					else = {
						log = "sfex_set_fleet_order: prevprev is valid scope operator but scope does not exist."
					}
				}
				sfex_prevprevprev = {
					if = {
						limit = {
							exists = prevprevprev
						}
						prevprevprev = {
							save_event_target_as = sfex_core_event_target_1
						}
					}
					else = {
						log = "sfex_set_fleet_order: prevprevprev is valid scope operator but scope does not exist."
					}
				}
				sfex_prevprevprevprev = {
					if = {
						limit = {
							exists = prevprevprevprev
						}
						prevprevprevprev = {
							save_event_target_as = sfex_core_event_target_1
						}
					}
					else = {
						log = "sfex_set_fleet_order: prevprevprevprev is valid scope operator but scope does not exist."
					}
				}
				sfex_from = {
					if = {
						limit = {
							exists = from
						}
						from = {
							save_event_target_as = sfex_core_event_target_1
						}
					}
					else = {
						log = "sfex_set_fleet_order: from is valid scope operator but scope does not exist."
					}
				}
				sfex_fromfrom = {
					if = {
						limit = {
							exists = fromfrom
						}
						fromfrom = {
							save_event_target_as = sfex_core_event_target_1
						}
					}
					else = {
						log = "sfex_set_fleet_order: fromfrom is valid scope operator but scope does not exist."
					}
				}
				sfex_fromfromfrom = {
					if = {
						limit = {
							exists = fromfromfrom
						}
						fromfromfrom = {
							save_event_target_as = sfex_core_event_target_1
						}
					}
					else = {
						log = "sfex_set_fleet_order: fromfromfrom is valid scope operator but scope does not exist."
					}
				}
				sfex_fromfromfromfrom = {
					if = {
						limit = {
							exists = fromfromfromfrom
						}
						fromfromfromfrom = {
							save_event_target_as = sfex_core_event_target_1
						}
					}
					else = {
						log = "sfex_set_fleet_order: fromfromfromfrom is valid scope operator but scope does not exist."
					}
				}
				# sfex_owner = {}
				# sfex_controller = {}
				# sfex_capital = {}
				# sfex_solar_system = {}
				# sfex_leader = {}
				# sfex_random = {}
				default = {
					log = "sfex_set_fleet_order: Unsupported scope operator. event_targets must be referenced by name only. TARGET = event_target root prev prevprev prevprevprev prevprevprevprev from fromfrom fromfromfrom fromfromfromfrom."
				}
			}
		}
	}
}
